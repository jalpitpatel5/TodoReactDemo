{"version":3,"sources":["logo.svg","components/AddTodo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddTodo","state","Id","Title","Status","handleIdChange","event","setState","target","value","handleTitleChange","handleStatusChange","handleToDoSubmit","preventDefault","props","onAdd","className","this","placeholder","type","Component","ToDoList","todos","Titile","status","deleteToDo","todo","filteredItems","filter","x","addToDo","editToDo","map","align","key","style","color","onClick","icon","library","add","faTrash","faEdit","faPlus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,wKCCtBC,E,4MACjBC,MAAQ,CACJC,GAAI,GACJC,MAAO,GACPC,OAAQ,W,EAEhBC,eAAiB,SAACC,GACV,EAAKC,SAAS,CACVL,GAAII,EAAME,OAAOC,S,EAGzBC,kBAAoB,SAACJ,GACjB,EAAKC,SAAS,CACVJ,MAAOG,EAAME,OAAOC,S,EAG5BE,mBAAqB,SAACL,GAClB,EAAKC,SAAS,CACVH,OAAQE,EAAME,OAAOC,S,EAG7BG,iBAAmB,SAACN,GAChBA,EAAMO,iBACN,EAAKC,MAAMC,MAAM,CACbb,GAAI,EAAKD,MAAMC,GACfC,MAAO,EAAKF,MAAME,MAClBC,OAAQ,EAAKH,MAAMG,SAEvB,EAAKG,SAAS,CACVL,GAAI,GACJC,MAAO,GACPC,OAAQ,a,uDAKZ,OACI,6BACI,wCAGA,8BACI,yBAAKY,UAAU,cACX,2BAAOP,MAAOQ,KAAKhB,MAAMC,GAAIc,UAAU,eAAeE,YAAY,cAEtE,yBAAKF,UAAU,cACX,2BAAOP,MAAOQ,KAAKhB,MAAME,MAAOa,UAAU,eAAeE,YAAY,iBAEzE,yBAAKF,UAAU,cACX,4BAAQP,MAAOQ,KAAKhB,MAAMG,OAAQY,UAAU,gBACxC,4BAAQP,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,aAGR,4BAAQU,KAAK,SAASH,UAAU,gCAAhC,kB,GAtDiBI,aCGhBC,E,4MAEjBpB,MAAQ,CACJqB,MAAO,CAAC,CAACpB,GAAG,IAAIqB,OAAQ,sBAAuBC,OAAQ,QAC/C,CAACtB,GAAG,IAAKqB,OAAO,oBAAqBC,OAAQ,WAC7C,CAACtB,GAAG,IAAKqB,OAAQ,iBAAkBC,OAAQ,a,EAIvDC,WAAa,SAACC,GACV,IAAMC,EAAgB,EAAK1B,MAAMqB,MAAMM,QAAO,SAAAC,GAAC,OAAIA,EAAE3B,KAAOwB,EAAKxB,MACjE,EAAKK,SAAS,CACTe,MAAOK,K,EAIhBG,QAAU,SAACJ,GACP,EAAKnB,SAAS,CACVe,MAAM,GAAD,mBAAM,EAAKrB,MAAMqB,OAAjB,CAAwBI,O,EAGrCK,SAAW,SAACF,GACR,EAAKtB,UAAS,SAAAN,GAAK,MAAK,CACpBqB,MAAOrB,EAAMqB,MAAMU,KAAI,SAAAN,GACnB,OAAIA,EAAKxB,KAAO2B,EAAE3B,GACP,2BACAwB,GADP,IAEItB,OAAwB,SAAhBsB,EAAKtB,OAAoB,UAAY,SAG1CsB,U,uDAKd,IAAD,OACJ,OACI,6BACI,wBAAIO,MAAQ,UAAZ,eACA,6BACA,kBAAC,EAAD,CAASlB,MAAOE,KAAKa,UACrB,2BAAOd,UAAU,SACb,+BACI,4BACI,kCACA,sCACA,sCACA,yCAGR,+BACKC,KAAKhB,MAAMqB,MAAMU,KAAI,SAAAH,GAClB,OACI,wBAAIK,IAAKL,EAAE3B,IACX,4BAAK2B,EAAE3B,IACP,4BAAK2B,EAAEN,QACP,wBAAIY,MAAO,CAAEC,MAAoB,SAAbP,EAAEL,OAAoB,QAAU,QAAUK,EAAEL,QAChE,4BACI,4BAAQR,UAAY,kBAAkBqB,QAAW,kBAAI,EAAKZ,WAAWI,KACjE,8BACI,kBAAC,IAAD,CAAiBS,KAAK,YAG/B,4BAAQtB,UAAU,kBAAkBqB,QAAS,kBAAM,EAAKN,SAASF,KACxD,8BACI,kBAAC,IAAD,CAAiBS,KAAK,uB,GAjEhClB,a,cCEtCmB,IAAQC,IAAIC,IAASC,IAAQC,KAQdC,MANf,WACE,OACM,kBAAC,EAAD,OCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d7f3f9f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nexport default class AddTodo extends Component {\r\n    state = {\r\n        Id: \"\",\r\n        Title: \"\",\r\n        Status: \"Pending\"\r\n    };\r\nhandleIdChange = (event) => {\r\n        this.setState({\r\n            Id: event.target.value\r\n        });\r\n    };\r\n    handleTitleChange = (event) => {\r\n        this.setState({\r\n            Title: event.target.value\r\n        });\r\n    }\r\n    handleStatusChange = (event) => {\r\n        this.setState({\r\n            Status: event.target.value\r\n        });\r\n    };\r\n    handleToDoSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAdd({\r\n            Id: this.state.Id,\r\n            Title: this.state.Title,\r\n            Status: this.state.Status\r\n        });\r\n        this.setState({\r\n            Id: \"\",\r\n            Title: \"\",\r\n            Status: \"Pending\"\r\n        });\r\n    };\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    Add ToDo\r\n                </h3>\r\n                <form>\r\n                    <div className=\"form-group\" >\r\n                        <input value={this.state.Id} className=\"form-control\" placeholder=\"Enter Id\" />\r\n                    </div>\r\n                    <div className=\"form-group\" >\r\n                        <input value={this.state.Title} className=\"form-control\" placeholder=\"Enter Title\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <select value={this.state.Status} className=\"form-control\" >\r\n                            <option value=\"Done\" >Done</option>\r\n                            <option value=\"Pending\" >Pending</option>\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"form-control btn btn-primary\" >Add Todo</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport AddTodo from './AddTodo';\r\n\r\nexport default class ToDoList extends Component{\r\n\r\n    state = {\r\n        todos: [{Id:'1',Titile: 'Push code to github', status: 'Done'},\r\n                {Id:'2', Titile:'Send confirmation', status: 'Pending'},\r\n                {Id:'3', Titile: 'Resolve issues', status: 'Pending'}\r\n        ]\r\n    };\r\n\r\n    deleteToDo = (todo) => {\r\n        const filteredItems = this.state.todos.filter(x => x.Id !== todo.Id);\r\n        this.setState({\r\n             todos: filteredItems\r\n        });\r\n    };\r\n\r\n    addToDo = (todo) => {\r\n        this.setState({\r\n            todos: [...this.state.todos, todo]\r\n        });\r\n    };  \r\n    editToDo = (x) => {\r\n        this.setState(state => ({\r\n            todos: state.todos.map(todo => {\r\n                if (todo.Id === x.Id) {\r\n                    return {\r\n                        ...todo,\r\n                        Status: todo.Status === \"Done\" ? \"Pending\" : \"Done\"\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        }));\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 align = 'center'>My TodoList</h1>\r\n                <br></br>\r\n                <AddTodo onAdd={this.addToDo}></AddTodo>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Titile</th>\r\n                            <th>Status</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.todos.map(x =>{\r\n                            return(\r\n                                <tr key={x.Id}>\r\n                                <td>{x.Id}</td>\r\n                                <td>{x.Titile}</td>\r\n                                <td style={{ color: x.status === \"Done\" ? \"green\" : \"red\" }}>{x.status}</td>\r\n                                <td>  \r\n                                    <button className = \"btn btn-primary\" onClick = {()=>this.deleteToDo(x)}>\r\n                                        <span>\r\n                                            <FontAwesomeIcon icon=\"trash\"></FontAwesomeIcon>\r\n                                        </span>\r\n                                   </button> \r\n                                   <button className=\"btn btn-primary\" onClick={() => this.editToDo(x)}>\r\n                                            <span>\r\n                                                <FontAwesomeIcon icon=\"edit\"></FontAwesomeIcon>\r\n                                            </span>\r\n                                    </button>\r\n                                </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash, faPlus, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faTrash, faEdit, faPlus);\n\nfunction App() {\n  return (\n        <ToDoList></ToDoList>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}